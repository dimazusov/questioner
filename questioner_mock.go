// Code generated by MockGen. DO NOT EDIT.
// Source: questioner.go

// Package main is a generated GoMock package.
package main

import (
	context "context"
	sentence "optimization/internal/pkg/sentence"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetQuestionTemplate mocks base method.
func (m *MockRepository) GetQuestionTemplate(ctx context.Context, q sentence.Sentence) (*sentence.Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestionTemplate", ctx, q)
	ret0, _ := ret[0].(*sentence.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestionTemplate indicates an expected call of GetQuestionTemplate.
func (mr *MockRepositoryMockRecorder) GetQuestionTemplate(ctx, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestionTemplate", reflect.TypeOf((*MockRepository)(nil).GetQuestionTemplate), ctx, q)
}

// GetResponse mocks base method.
func (m *MockRepository) GetResponse(ctx context.Context, r sentence.Template) (*sentence.Sentence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResponse", ctx, r)
	ret0, _ := ret[0].(*sentence.Sentence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResponse indicates an expected call of GetResponse.
func (mr *MockRepositoryMockRecorder) GetResponse(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponse", reflect.TypeOf((*MockRepository)(nil).GetResponse), ctx, r)
}

// GetResponseTemplate mocks base method.
func (m *MockRepository) GetResponseTemplate(ctx context.Context, q sentence.Template) (*sentence.Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResponseTemplate", ctx, q)
	ret0, _ := ret[0].(*sentence.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResponseTemplate indicates an expected call of GetResponseTemplate.
func (mr *MockRepositoryMockRecorder) GetResponseTemplate(ctx, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponseTemplate", reflect.TypeOf((*MockRepository)(nil).GetResponseTemplate), ctx, q)
}

// MockMorphClient is a mock of MorphClient interface.
type MockMorphClient struct {
	ctrl     *gomock.Controller
	recorder *MockMorphClientMockRecorder
}

// MockMorphClientMockRecorder is the mock recorder for MockMorphClient.
type MockMorphClientMockRecorder struct {
	mock *MockMorphClient
}

// NewMockMorphClient creates a new mock instance.
func NewMockMorphClient(ctrl *gomock.Controller) *MockMorphClient {
	mock := &MockMorphClient{ctrl: ctrl}
	mock.recorder = &MockMorphClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMorphClient) EXPECT() *MockMorphClientMockRecorder {
	return m.recorder
}
